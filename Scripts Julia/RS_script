#Jonathan Morin, Centre régional intégré de cancérologie (Hôtel-Dieu de Lévis).
#Objectif du script: Copier le plan clinique pour lequel on veut un calcul indépendant par Monaco.
#Monaco comporte certains caprices pour permettre d'utiliser sa fonction "Recalculate Dicom Plan".
#1. Il ne doit pas y avoir de setup beams dans le fichier RP exporté. (ils sont donc tous enlevés dans le plan copié)
#2. Il ne peut y avoir de champs de modalités différentes dans le même beamset (par exemple un plan 3DCRT dans lequel il y a des champs avec 1 seul segments et d'autres comportant 2 segments ou plus. (Le script vérifie donc s'il y a des champs à différents nombre de segments si le beamset est de type SMLC. Si oui, il split les segments en champs indépendants et recalcule le plan.
#3. Le plan ne doit comporter que des champs de photons, donc pas d'électrons. (Les plans d'électrons sont gérés par un autre script.
#Le script crée des structures à partir des isodoses 95 et 100% pour chacun des beamsets pour la comparaison dans Monaco.
#Le tout est finalement exporté directement vers Monaco.

from connect import *
patient = get_current("Patient")
case = get_current("Case")
plan = get_current("Plan")
#beamset = get_current("BeamSet")
examination = get_current("Examination")
ExaminationName = examination.Name
patientmodel=case.PatientModel
case.CopyPlan(PlanName=plan.Name, NewPlanName="VALIDATION_MU") #Copie le plan ouvert et l'appel VALIDATION_MU. S'il y a plusieurs beamset, il ajoute un chiffre à la fin pour chacun.
#plan_dose = plan.TreatmentCourse.TotalDose #Pour aller chercher la dose totale du plan
NbBeamset = sum(1 for _ in case.TreatmentPlans['VALIDATION_MU'].BeamSets)
roi_names = [r.Name for r in case.PatientModel.RegionsOfInterest]
for j, beamset in enumerate(case.TreatmentPlans['VALIDATION_MU'].BeamSets):
#for j in case.TreatmentPlans['VALIDATION_MU'].BeamSets:
 p = 0
 for _ in case.TreatmentPlans['VALIDATION_MU'].BeamSets[j].Prescription.DosePrescriptions:
  p += 1
  if p != 0:
   prescription = case.TreatmentPlans['VALIDATION_MU'].BeamSets[j].Prescription.PrimaryDosePrescription.DoseValue
  else:
   print("Je suis vide")
   prescription = case.TreatmentPlans['VALIDATION_MU'].BeamSets[j+1].Prescription.PrimaryDosePrescription.DoseValue
  NbFractions = case.TreatmentPlans['VALIDATION_MU'].BeamSets[j].FractionationPattern.NumberOfFractions
  threshold_level = 0.95 * prescription/NbFractions
  Distribution = case.TreatmentPlans['VALIDATION_MU'].BeamSets[j].FractionDose
  if 'aBREAST' in roi_names:
   Distribution = plan.TreatmentCourse.TotalDose
   threshold_level = threshold_level*NbFractions
  Iso95 = str('Dose_95%' + case.TreatmentPlans['VALIDATION_MU'].BeamSets[j].DicomPlanLabel)
  if Iso95 in roi_names:
   print(Iso95 + " existe deja")
  else:
   roi = case.PatientModel.CreateRoi(Name=Iso95, Color='Blue', Type='Control') #On crée une structure qui s'appelle Dose_95% avec suffixe du beamset
   patientmodel.StructureSets[ExaminationName].RoiGeometries[Iso95].OfRoi.CreateRoiGeometryFromDose(DoseDistribution=Distribution, ThresholdLevel=threshold_level)
  Iso100 = str('Dose100%' + case.TreatmentPlans['VALIDATION_MU'].BeamSets[j].DicomPlanLabel)
  if Iso100 in roi_names:
   print(Iso100 + " existe deja")
  else:
   roi = case.PatientModel.CreateRoi(Name=Iso100, Color='Blue', Type='Control') #On crée une structure qui s'appelle Dose_100% avec suffixe du beamset
   patientmodel.StructureSets[ExaminationName].RoiGeometries[Iso100].OfRoi.CreateRoiGeometryFromDose(DoseDistribution=Distribution, ThresholdLevel=threshold_level/0.95)
  case.TreatmentPlans['VALIDATION_MU'].BeamSets[j].PatientSetup.UseSetupBeams = False #Désactive la section des setup beams
  if case.TreatmentPlans['VALIDATION_MU'].BeamSets[j].DeliveryTechnique=='SMLC':
   for i, beam in enumerate(case.TreatmentPlans['VALIDATION_MU'].BeamSets[j].Beams):
    NbSegments = sum(1 for _ in case.TreatmentPlans['VALIDATION_MU'].BeamSets[j].Beams[i].Segments)
    if NbSegments>1:
     case.TreatmentPlans['VALIDATION_MU'].BeamSets[j].SplitBeamSegmentsIntoBeams(BeamName=case.TreatmentPlans['VALIDATION_MU'].BeamSets[j].Beams[i].Name)
  if case.TreatmentPlans['VALIDATION_MU'].BeamSets[j].FractionDose.DoseValues == None:
   case.TreatmentPlans['VALIDATION_MU'].BeamSets[j].ComputeDose(ComputeBeamDoses=True, DoseAlgorithm="CCDose", ForceRecompute=False)
  case.TreatmentPlans['VALIDATION_MU'].BeamSets[j].FractionDose.UpdateDoseGridStructures()
  case.TreatmentPlans['VALIDATION_MU'].TreatmentCourse.TotalDose.UpdateDoseGridStructures()
  patient.Save()
  import json
# Example on how to read the JSON error string.
  def LogWarning(warning):
   try:
    jsonWarnings = json.loads(str(warning))
# If the json.loads() works then the script was stopped due to
# a non-blocking warning.
    print " "
    print "WARNING! Export Aborted!"
    print "Comment:"
    print " ",
    print jsonWarnings["Comment"]
    print "Warnings:"
# Here the user can handle the warnings. Continue on known warnings,
# stop on unknown warnings.
    for w in jsonWarnings["Warnings"]:
     print " ",
     print w
   except ValueError as error:
    print "Error occurred. Could not export."
# The error was likely due to a blocking warning, and the details should be stated
# in the execution log.
# This prints the successful result log in an ordered way.
  def LogCompleted(completed):
   try:
    jsonWarnings = json.loads(str(completed))
    print " "
    print "Completed!"
    print "Comment:"
    print " ",
    print jsonWarnings["Comment"]
    print "Warnings:"
    for w in jsonWarnings["Warnings"]:
     print " ",
     print w
    print "Export notifications:"
# Export notifications is a list of notifications that the user should read.
    for w in jsonWarnings["ExportNotifications"]:
     print " ",
     print w
   except ValueError as error:
    print "Error reading completion messages."
#examination = case.Examinations[0]
  plan = case.TreatmentPlans['VALIDATION_MU']
  beamset = case.TreatmentPlans['VALIDATION_MU'].BeamSets[j]
#result = case.ScriptableDicomExport(ExportFolderPath='\\\\R12SVCTRBDRE001\\DicomImageStorage\\ExportScript\\', Examinations=[examination.Name], RtStructureSetsForExaminations=[examination.Name], BeamSets=[beamset.BeamSetIdentifier()], BeamSetDoseForBeamSets=[beamset.BeamSetIdentifier()], RtStructureSetsReferencedFromBeamSets = [beamset.BeamSetIdentifier()], DicomFilter="", IgnorePreConditionWarnings=True)
  result = case.ScriptableDicomExport(AEHostname='10.81.143.77', AEPort = '104', CallingAETitle = 'RAYSTATION_SSCP', CalledAETitle = 'MON_SCP', Examinations=[examination.Name], RtStructureSetsForExaminations=[examination.Name], BeamSets=[beamset.BeamSetIdentifier()], BeamSetDoseForBeamSets=[beamset.BeamSetIdentifier()], RtStructureSetsReferencedFromBeamSets = [beamset.BeamSetIdentifier()], DicomFilter="", IgnorePreConditionWarnings=True)
#La ligne précédente export au service DICOM de Monaco.
#Exporte les DICOM files de: ImageCT, RP et RD seulement.
# It is very important to read the result event if the script was successful.
# This gives the user a chance to see any warnings that have been ignored.
  LogCompleted(result)
